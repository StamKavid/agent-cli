[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-agent-cli-project"
version = "0.3.0"
description = "ðŸ¤– Scaffold AI agent projects instantly - zero configuration, just works. One command and you're building agents!"
authors = [
    {name = "Stamatis Kavidopoulos", email = "stamatis.kavidopoulos@gmail.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: System :: Systems Administration",
    "Environment :: Console",
    "Operating System :: OS Independent",
]
keywords = ["ai", "agent", "cli", "development", "framework", "llm", "langchain", "langgraph"]
dependencies = [
    "rich>=13.7.0",
    "jinja2>=3.1.3",
    "pyyaml>=6.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "black>=24.8.0",
    "isort>=5.13.0",
    "mypy>=1.11.0",
    "flake8>=7.1.0",
    "pre-commit>=3.8.0",
]
# Removed heavy optional dependencies that aren't needed for scaffolding
templates = [
    "langchain>=0.2.0",
    "openai>=1.0.0",
    "anthropic>=0.8.0",
    "python-dotenv>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/StamKavid/agent-cli"
Repository = "https://github.com/StamKavid/agent-cli"
Documentation = "https://github.com/StamKavid/agent-cli#readme"
Issues = "https://github.com/StamKavid/agent-cli/issues"
Changelog = "https://github.com/StamKavid/agent-cli/blob/main/CHANGELOG.md"

[project.scripts]
agent-cli = "agent_cli:main"
agent = "agent_cli:main"
agentcli = "agent_cli:main"
ai-agent-cli = "agent_cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Exclude generated files
  \.git
  | \.mypy_cache
  | \.pytest_cache
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-v --cov=src/agent_cli --cov-report=html --cov-report=term-missing --cov-fail-under=80"
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["src/agent_cli"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
